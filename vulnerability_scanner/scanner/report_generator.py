# scanner/report_generator.py
import json
from datetime import datetime
from typing import List, Dict

class ReportGenerator:
    def __init__(self):
        self.report_data = {}
    
    def generate_html_report(self, vulnerabilities: List[Dict], target_url: str) -> str:
        """Generate HTML vulnerability report"""
        
        # Count vulnerabilities by severity
        severity_counts = {'Critical': 0, 'High': 0, 'Medium': 0, 'Low': 0}
        vuln_types = {}
        
        for vuln in vulnerabilities:
            severity_counts[vuln['severity']] += 1
            vuln_type = vuln['type']
            vuln_types[vuln_type] = vuln_types.get(vuln_type, 0) + 1
        
        html_report = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Vulnerability Scan Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f4f4f4; padding: 20px; border-radius: 5px; }}
                .summary {{ margin: 20px 0; padding: 15px; background-color: #e9ecef; }}
                .vulnerability {{ margin: 10px 0; padding: 15px; border-left: 4px solid #ccc; }}
                .critical {{ border-left-color: #dc3545; }}
                .high {{ border-left-color: #fd7e14; }}
                .medium {{ border-left-color: #ffc107; }}
                .low {{ border-left-color: #28a745; }}
                .evidence {{ background-color: #f8f9fa; padding: 10px; margin: 5px 0; font-family: monospace; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Web Application Vulnerability Scan Report</h1>
                <p><strong>Target URL:</strong> {target_url}</p>
                <p><strong>Scan Date:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p><strong>Total Vulnerabilities Found:</strong> {len(vulnerabilities)}</p>
            </div>
            
            <div class="summary">
                <h2>Summary</h2>
                <p><strong>Critical:</strong> {severity_counts['Critical']}</p>
                <p><strong>High:</strong> {severity_counts['High']}</p>
                <p><strong>Medium:</strong> {severity_counts['Medium']}</p>
                <p><strong>Low:</strong> {severity_counts['Low']}</p>
                
                <h3>Vulnerability Types Found</h3>
                {''.join([f'<p><strong>{vtype}:</strong> {count}</p>' for vtype, count in vuln_types.items()])}
            </div>
            
            <div class="vulnerabilities">
                <h2>Detailed Findings</h2>
        """
        
        for i, vuln in enumerate(vulnerabilities, 1):
            severity_class = vuln['severity'].lower()
            html_report += f"""
                <div class="vulnerability {severity_class}">
                    <h3>#{i} - {vuln['type']} ({vuln['severity']})</h3>
                    <p><strong>URL:</strong> {vuln['url']}</p>
                    <p><strong>Method:</strong> {vuln['method'].upper()}</p>
                    <p><strong>Parameter:</strong> {vuln['parameter']}</p>
                    <p><strong>Description:</strong> {vuln['description']}</p>
                    <div class="evidence">
                        <strong>Evidence:</strong><br>
                        {vuln['evidence']}<br>
                        <strong>Payload:</strong> {vuln['payload']}
                    </div>
                </div>
            """
        
        html_report += """
            </div>
        </body>
        </html>
        """
        
        return html_report
    
    def save_report(self, html_content: str, filename: str = None) -> str:
        """Save HTML report to file"""
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"reports/vulnerability_report_{timestamp}.html"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html_content)
            print(f"Report saved to: {filename}")
            return filename
        except Exception as e:
            print(f"Error saving report: {str(e)}")
            return None