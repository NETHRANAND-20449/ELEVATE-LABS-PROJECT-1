# scanner/vulnerability_tests.py
import requests
from bs4 import BeautifulSoup
import time
import re
from typing import List, Dict
import urllib.parse

class VulnerabilityTester:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'VulnScanner/1.0 (Security Testing Tool)'
        })
        self.vulnerabilities = []
        
        # XSS Payloads
        self.xss_payloads = [
            "<script>alert('XSS')</script>",
            "javascript:alert('XSS')",
            "<img src=x onerror=alert('XSS')>",
            "'>><script>alert('XSS')</script>",
            "<svg onload=alert('XSS')>",
            "\"onmouseover=\"alert('XSS')\""
        ]

        #end
        
        # SQL Injection Payloads
        self.sqli_payloads = [
            "'",
            "' OR '1'='1",
            "' OR '1'='1' --",
            "' OR '1'='1' /*",
            "admin'--",
            "admin'/*",
            "' OR 1=1--",
            "' UNION SELECT NULL--",
            "1' AND (SELECT COUNT(*) FROM information_schema.tables)>0--"
        ]
        
        # SQL Error patterns
        self.sql_errors = [
            r"SQL syntax.*MySQL",
            r"Warning.*mysql_.*",
            r"MySQLSyntaxErrorException",
            r"valid MySQL result",
            r"PostgreSQL.*ERROR",
            r"Warning.*pg_.*",
            r"valid PostgreSQL result",
            r"ORA-[0-9]{4,5}",
            r"Oracle error",
            r"Microsoft OLE DB Provider for ODBC Drivers error",
            r"Unclosed quotation mark after the character string",
            r"SQLite.*error"
        ]
    
    def test_xss(self, form_data: Dict) -> List[Dict]:
        """Test for XSS vulnerabilities"""
        vulnerabilities = []
        
        for payload in self.xss_payloads:
            try:
                # Prepare form data
                data = {}
                for input_field in form_data['inputs']:
                    if input_field['type'] not in ['hidden', 'submit', 'button']:
                        data[input_field['name']] = payload
                    else:
                        data[input_field['name']] = input_field['value']
                
                # Submit form
                if form_data['method'] == 'post':
                    response = self.session.post(form_data['action'], data=data, timeout=10)
                else:
                    response = self.session.get(form_data['action'], params=data, timeout=10)
                
                # Check if payload is reflected
                if payload in response.text:
                    vulnerability = {
                        'type': 'XSS',
                        'severity': 'High',
                        'url': form_data['action'],
                        'payload': payload,
                        'method': form_data['method'],
                        'parameter': list(data.keys()),
                        'evidence': f"Payload reflected in response: {payload[:50]}...",
                        'description': 'Cross-Site Scripting (XSS) vulnerability detected'
                    }
                    vulnerabilities.append(vulnerability)
                    print(f"XSS found: {form_data['action']} with payload: {payload}")
                    break  # Found XSS, no need to test more payloads on this form
                    
            except Exception as e:
                print(f"Error testing XSS on {form_data['action']}: {str(e)}")
                continue
        
        return vulnerabilities
    
    def test_sql_injection(self, form_data: Dict) -> List[Dict]:
        """Test for SQL Injection vulnerabilities"""
        vulnerabilities = []
        
        for payload in self.sqli_payloads:
            try:
                # Prepare form data
                data = {}
                for input_field in form_data['inputs']:
                    if input_field['type'] not in ['hidden', 'submit', 'button']:
                        data[input_field['name']] = payload
                    else:
                        data[input_field['name']] = input_field['value']
                
                # Submit form and measure response time
                start_time = time.time()
                
                if form_data['method'] == 'post':
                    response = self.session.post(form_data['action'], data=data, timeout=10)
                else:
                    response = self.session.get(form_data['action'], params=data, timeout=10)
                
                response_time = time.time() - start_time
                
                # Check for SQL errors
                sql_error_found = False
                for error_pattern in self.sql_errors:
                    if re.search(error_pattern, response.text, re.IGNORECASE):
                        sql_error_found = True
                        break
                
                # Check for time-based SQL injection (response time > 5 seconds)
                time_based_sqli = response_time > 5
                
                if sql_error_found or time_based_sqli:
                    vulnerability = {
                        'type': 'SQL Injection',
                        'severity': 'Critical',
                        'url': form_data['action'],
                        'payload': payload,
                        'method': form_data['method'],
                        'parameter': list(data.keys()),
                        'evidence': 'SQL error detected' if sql_error_found else f'Time delay detected: {response_time:.2f}s',
                        'description': 'SQL Injection vulnerability detected'
                    }
                    vulnerabilities.append(vulnerability)
                    print(f"SQLi found: {form_data['action']} with payload: {payload}")
                    break  # Found SQLi, no need to test more payloads
                    
            except Exception as e:
                print(f"Error testing SQLi on {form_data['action']}: {str(e)}")
                continue
        
        return vulnerabilities
    
    def test_csrf(self, form_data: Dict) -> List[Dict]:
        """Test for CSRF vulnerabilities"""
        vulnerabilities = []
        
        # Check if form has CSRF token
        has_csrf_token = False
        csrf_fields = ['csrf_token', 'csrfmiddlewaretoken', '_token', 'authenticity_token']
        
        for input_field in form_data['inputs']:
            if any(csrf_field in input_field['name'].lower() for csrf_field in csrf_fields):
                has_csrf_token = True
                break
        
        if not has_csrf_token and form_data['method'] == 'post':
            vulnerability = {
                'type': 'CSRF',
                'severity': 'Medium',
                'url': form_data['action'],
                'payload': 'N/A',
                'method': form_data['method'],
                'parameter': 'Form lacks CSRF protection',
                'evidence': 'No CSRF token found in form',
                'description': 'Cross-Site Request Forgery (CSRF) vulnerability detected'
            }
            vulnerabilities.append(vulnerability)
            print(f"CSRF vulnerability found: {form_data['action']}")
        
        return vulnerabilities
    
    def check_security_headers(self, url: str) -> List[Dict]:
        """Check for missing security headers"""
        vulnerabilities = []
        
        try:
            response = self.session.get(url, timeout=10)
            headers = response.headers
            
            security_headers = {
                'X-Frame-Options': 'Clickjacking protection missing',
                'X-XSS-Protection': 'XSS protection header missing',
                'X-Content-Type-Options': 'MIME type sniffing protection missing',
                'Strict-Transport-Security': 'HTTPS enforcement missing',
                'Content-Security-Policy': 'Content Security Policy missing'
            }
            
            for header, description in security_headers.items():
                if header not in headers:
                    vulnerability = {
                        'type': 'Security Headers',
                        'severity': 'Low',
                        'url': url,
                        'payload': 'N/A',
                        'method': 'GET',
                        'parameter': header,
                        'evidence': f'Missing {header} header',
                        'description': description
                    }
                    vulnerabilities.append(vulnerability)
        
        except Exception as e:
            print(f"Error checking security headers for {url}: {str(e)}")
        
        return vulnerabilities
    
    def run_all_tests(self, crawl_data: Dict) -> List[Dict]:
        """Run all vulnerability tests"""
        print("Starting vulnerability tests...")
        all_vulnerabilities = []
        
        # Test each form for vulnerabilities
        for form in crawl_data['forms']:
            print(f"Testing form at: {form['action']}")
            
            # Test XSS
            xss_vulns = self.test_xss(form)
            all_vulnerabilities.extend(xss_vulns)
            
            # Test SQL Injection
            sqli_vulns = self.test_sql_injection(form)
            all_vulnerabilities.extend(sqli_vulns)
            
            # Test CSRF
            csrf_vulns = self.test_csrf(form)
            all_vulnerabilities.extend(csrf_vulns)
        
        # Check security headers for each visited URL
        for url in crawl_data['visited_urls']:
            header_vulns = self.check_security_headers(url)
            all_vulnerabilities.extend(header_vulns)
        
        print(f"Vulnerability testing completed. Found {len(all_vulnerabilities)} issues.")
        return all_vulnerabilities