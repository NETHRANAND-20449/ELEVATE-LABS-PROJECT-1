# web_interface/app.py
from flask import Flask, render_template, request, jsonify, send_file
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scanner.crawler import WebCrawler
from scanner.vulnerability_tests import VulnerabilityTester
from scanner.report_generator import ReportGenerator

import threading
import time

app = Flask(__name__)

# Global variables to store scan results
current_scan = {
    'status': 'idle',
    'progress': 0,
    'vulnerabilities': [],
    'report_file': None,
    'target_url': None
}

def run_scan_background(target_url):
    """Run scan in background thread"""
    global current_scan
    
    try:
        current_scan['status'] = 'running'
        current_scan['progress'] = 10
        current_scan['target_url'] = target_url
        
        # Initialize scanner components
        crawler = WebCrawler(target_url)
        tester = VulnerabilityTester()
        reporter = ReportGenerator()
        
        # Crawl website
        current_scan['progress'] = 30
        crawl_data = crawler.start_crawling()
        
        # Test vulnerabilities
        current_scan['progress'] = 60
        vulnerabilities = tester.run_all_tests(crawl_data)
        
        # Generate report
        current_scan['progress'] = 90
        html_report = reporter.generate_html_report(vulnerabilities, target_url)
        report_file = reporter.save_report(html_report)
        
        # Update results
        current_scan['vulnerabilities'] = vulnerabilities
        current_scan['report_file'] = report_file
        current_scan['progress'] = 100
        current_scan['status'] = 'completed'
        
    except Exception as e:
        current_scan['status'] = 'error'
        current_scan['progress'] = 0
        print(f"Scan error: {str(e)}")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/start_scan', methods=['POST'])
def start_scan():
    global current_scan
    
    if current_scan['status'] == 'running':
        return jsonify({'error': 'Scan already in progress'})
    
    target_url = request.json.get('url')
    if not target_url:
        return jsonify({'error': 'URL is required'})
    
    if not target_url.startswith(('http://', 'https://')):
        return jsonify({'error': 'URL must start with http:// or https://'})
    
    # Reset scan data
    current_scan = {
        'status': 'running',
        'progress': 0,
        'vulnerabilities': [],
        'report_file': None,
        'target_url': target_url
    }
    
    # Start scan in background thread
    scan_thread = threading.Thread(target=run_scan_background, args=(target_url,))
    scan_thread.daemon = True
    scan_thread.start()
    
    return jsonify({'message': 'Scan started successfully'})

@app.route('/scan_status')
def scan_status():
    return jsonify({
        'status': current_scan['status'],
        'progress': current_scan['progress'],
        'target_url': current_scan['target_url'],
        'vulnerabilities_count': len(current_scan['vulnerabilities'])
    })

@app.route('/scan_results')
def scan_results():
    if current_scan['status'] != 'completed':
        return jsonify({'error': 'Scan not completed'})
    
    return render_template('scan_results.html', 
                         vulnerabilities=current_scan['vulnerabilities'],
                         target_url=current_scan['target_url'])

@app.route('/download_report')
def download_report():
    if current_scan['report_file'] and os.path.exists(current_scan['report_file']):
        return send_file(current_scan['report_file'], as_attachment=True)
    else:
        print(f"[ERROR] File not found: {current_scan['report_file']}")
        return jsonify({'error': 'Report file not found'})

if __name__ == '__main__':
    os.makedirs('reports', exist_ok=True)
    app.run(debug=True, port=5000)
