# web_interface/static/script.js
"""
let scanInterval;

document.addEventListener('DOMContentLoaded', function() {
    const scanForm = document.getElementById('scanForm');
    const startBtn = document.getElementById('startBtn');
    const progressContainer = document.getElementById('scanProgress');
    const resultsContainer = document.getElementById('scanResults');
    
    scanForm.addEventListener('submit', function(e) {
        e.preventDefault();
        startScan();
    });
});

function startScan() {
    const targetUrl = document.getElementById('targetUrl').value;
    const startBtn = document.getElementById('startBtn');
    const progressContainer = document.getElementById('scanProgress');
    const resultsContainer = document.getElementById('scanResults');
    
    // Validate URL
    if (!targetUrl) {
        alert('Please enter a target URL');
        return;
    }
    
    // Reset UI
    startBtn.disabled = true;
    startBtn.textContent = 'Scanning...';
    progressContainer.style.display = 'block';
    resultsContainer.style.display = 'none';
    
    // Start scan
    fetch('/start_scan', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url: targetUrl })
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            alert('Error: ' + data.error);
            resetUI();
        } else {
            // Start polling for progress
            scanInterval = setInterval(checkScanStatus, 1000);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error starting scan');
        resetUI();
    });
}

function checkScanStatus() {
    fetch('/scan_status')
    .then(response => response.json())
    .then(data => {
        updateProgress(data.progress, getProgressText(data.status, data.progress));
        
        if (data.status === 'completed') {
            clearInterval(scanInterval);
            showResults(data);
        } else if (data.status === 'error') {
            clearInterval(scanInterval);
            alert('Scan failed');
            resetUI();
        }
    })
    .catch(error => {
        console.error('Error checking status:', error);
        clearInterval(scanInterval);
        resetUI();
    });
}

function updateProgress(progress, text) {
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');
    
    progressFill.style.width = progress + '%';
    progressText.textContent = text;
}

function getProgressText(status, progress) {
    if (progress < 30) return 'Initializing scan...';
    if (progress < 60) return 'Crawling website...';
    if (progress < 90) return 'Testing for vulnerabilities...';
    if (progress < 100) return 'Generating report...';
    return 'Scan completed!';
}

function showResults(data) {
    const resultsContainer = document.getElementById('scanResults');
    const resultsSummary = document.getElementById('resultsSummary');
    
    resultsSummary.innerHTML = `
        <p><strong>Target:</strong> ${data.target_url}</p>
        <p><strong>Vulnerabilities Found:</strong> ${data.vulnerabilities_count}</p>
    `;
    
    resultsContainer.style.display = 'block';
    resetUI();
}

function resetUI() {
    const startBtn = document.getElementById('startBtn');
    startBtn.disabled = false;
    startBtn.textContent = 'Start Scan';
}

function viewResults() {
    window.location.href = '/scan_results';
}

function downloadReport() {
    window.location.href = '/download_report';
}
"""