document.addEventListener("DOMContentLoaded", () => {
    const scanForm = document.getElementById("scanForm");
    const targetUrlInput = document.getElementById("targetUrl");
    const startBtn = document.getElementById("startBtn");
    const scanProgress = document.getElementById("scanProgress");
    const progressFill = document.getElementById("progressFill");
    const progressText = document.getElementById("progressText");
    const scanResults = document.getElementById("scanResults");
    const resultsSummary = document.getElementById("resultsSummary");

    let scanInterval;

    scanForm.addEventListener("submit", function (e) {
        e.preventDefault();
        startScan();
    });

    function startScan() {
        const targetUrl = targetUrlInput.value;

        if (!targetUrl) {
            alert('Please enter a target URL');
            return;
        }

        // Reset UI
        startBtn.disabled = true;
        startBtn.textContent = 'Scanning...';
        scanProgress.style.display = 'block';
        scanResults.style.display = 'none';
        updateProgress(0, 'Initializing scan...');

        // Start scan via POST /start_scan
        fetch("/start_scan", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ url: targetUrl })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert("Error: " + data.error);
                resetUI();
            } else {
                // Start polling scan status
                scanInterval = setInterval(checkScanStatus, 1000);
            }
        })
        .catch(error => {
            console.error('Error starting scan:', error);
            alert('Error starting scan');
            resetUI();
        });
    }

    function checkScanStatus() {
        fetch("/scan_status")
        .then(response => response.json())
        .then(data => {
            updateProgress(data.progress, getProgressText(data.status, data.progress));
            if (data.status === 'completed') {
                clearInterval(scanInterval);
                showResults(data);
            } else if (data.status === 'error') {
                clearInterval(scanInterval);
                alert('Scan failed. Check the server logs.');
                resetUI();
            }
        })
        .catch(error => {
            console.error('Error checking status:', error);
            clearInterval(scanInterval);
            resetUI();
        });
    }

    function updateProgress(progress, text) {
        progressFill.style.width = progress + '%';
        progressText.textContent = text;
    }

    function getProgressText(status, progress) {
        if (progress < 30) return 'Initializing scan...';
        if (progress < 60) return 'Crawling website...';
        if (progress < 90) return 'Testing for vulnerabilities...';
        if (progress < 100) return 'Generating report...';
        return 'Scan completed!';
    }

    function showResults(data) {
        resultsSummary.innerHTML = `
            <p><strong>Target:</strong> ${data.target_url}</p>
            <p><strong>Vulnerabilities Found:</strong> ${data.vulnerabilities_count}</p>
        `;
        scanResults.style.display = 'block';
        resetUI();
    }

    function resetUI() {
        startBtn.disabled = false;
        startBtn.textContent = 'Start Scan';
    }

    // Expose button actions to global scope so they can be called from HTML
    window.viewResults = function() {
        window.location.href = '/scan_results';
    };

    window.downloadReport = function() {
        window.location.href = '/download_report';
    };
});
