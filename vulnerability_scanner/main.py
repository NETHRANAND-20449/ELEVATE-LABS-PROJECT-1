# main.py
from scanner.crawler import WebCrawler
from scanner.vulnerability_tests import VulnerabilityTester
from scanner.report_generator import ReportGenerator
import sys
import os

class VulnerabilityScanner:
    def __init__(self, target_url: str):
        self.target_url = target_url
        self.crawler = WebCrawler(target_url)
        self.tester = VulnerabilityTester()
        self.reporter = ReportGenerator()
        
        # Create reports directory if it doesn't exist
        os.makedirs('reports', exist_ok=True)
    
    def run_scan(self):
        """Run complete vulnerability scan"""
        print(f"Starting vulnerability scan of {self.target_url}")
        print("="*60)
        
        # Step 1: Crawl the website
        print("Step 1: Crawling website...")
        crawl_data = self.crawler.start_crawling()
        print(f"Found {len(crawl_data['forms'])} forms and {len(crawl_data['visited_urls'])} URLs")
        
        # Step 2: Test for vulnerabilities
        print("\nStep 2: Testing for vulnerabilities...")
        vulnerabilities = self.tester.run_all_tests(crawl_data)
        
        # Step 3: Generate report
        print("\nStep 3: Generating report...")
        html_report = self.reporter.generate_html_report(vulnerabilities, self.target_url)
        report_file = self.reporter.save_report(html_report)
        
        # Print summary
        print("\n" + "="*60)
        print("SCAN COMPLETE")
        print("="*60)
        print(f"Target: {self.target_url}")
        print(f"Forms tested: {len(crawl_data['forms'])}")
        print(f"URLs crawled: {len(crawl_data['visited_urls'])}")
        print(f"Vulnerabilities found: {len(vulnerabilities)}")
        
        if vulnerabilities:
            severity_count = {}
            for vuln in vulnerabilities:
                severity = vuln['severity']
                severity_count[severity] = severity_count.get(severity, 0) + 1
            
            for severity, count in severity_count.items():
                print(f"  {severity}: {count}")
        
        print(f"Report saved to: {report_file}")
        
        return vulnerabilities, report_file

def main():
    if len(sys.argv) != 2:
        print("Usage: python main.py <target_url>")
        print("Example: python main.py http://testphp.vulnweb.com/")
        sys.exit(1)
    
    target_url = sys.argv[1]
    
    # Validate URL
    if not target_url.startswith(('http://', 'https://')):
        print("Error: URL must start with http:// or https://")
        sys.exit(1)
    
    scanner = VulnerabilityScanner(target_url)
    try:
        vulnerabilities, report_file = scanner.run_scan()
    except KeyboardInterrupt:
        print("\nScan interrupted by user")
    except Exception as e:
        print(f"Error during scan: {str(e)}")

if __name__ == "__main__":
    main()